/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsConfigConfigurationRecorderLister helps list AwsConfigConfigurationRecorders.
type AwsConfigConfigurationRecorderLister interface {
	// List lists all AwsConfigConfigurationRecorders in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsConfigConfigurationRecorder, err error)
	// AwsConfigConfigurationRecorders returns an object that can list and get AwsConfigConfigurationRecorders.
	AwsConfigConfigurationRecorders(namespace string) AwsConfigConfigurationRecorderNamespaceLister
	AwsConfigConfigurationRecorderListerExpansion
}

// awsConfigConfigurationRecorderLister implements the AwsConfigConfigurationRecorderLister interface.
type awsConfigConfigurationRecorderLister struct {
	indexer cache.Indexer
}

// NewAwsConfigConfigurationRecorderLister returns a new AwsConfigConfigurationRecorderLister.
func NewAwsConfigConfigurationRecorderLister(indexer cache.Indexer) AwsConfigConfigurationRecorderLister {
	return &awsConfigConfigurationRecorderLister{indexer: indexer}
}

// List lists all AwsConfigConfigurationRecorders in the indexer.
func (s *awsConfigConfigurationRecorderLister) List(selector labels.Selector) (ret []*v1.AwsConfigConfigurationRecorder, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsConfigConfigurationRecorder))
	})
	return ret, err
}

// AwsConfigConfigurationRecorders returns an object that can list and get AwsConfigConfigurationRecorders.
func (s *awsConfigConfigurationRecorderLister) AwsConfigConfigurationRecorders(namespace string) AwsConfigConfigurationRecorderNamespaceLister {
	return awsConfigConfigurationRecorderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsConfigConfigurationRecorderNamespaceLister helps list and get AwsConfigConfigurationRecorders.
type AwsConfigConfigurationRecorderNamespaceLister interface {
	// List lists all AwsConfigConfigurationRecorders in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsConfigConfigurationRecorder, err error)
	// Get retrieves the AwsConfigConfigurationRecorder from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsConfigConfigurationRecorder, error)
	AwsConfigConfigurationRecorderNamespaceListerExpansion
}

// awsConfigConfigurationRecorderNamespaceLister implements the AwsConfigConfigurationRecorderNamespaceLister
// interface.
type awsConfigConfigurationRecorderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsConfigConfigurationRecorders in the indexer for a given namespace.
func (s awsConfigConfigurationRecorderNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsConfigConfigurationRecorder, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsConfigConfigurationRecorder))
	})
	return ret, err
}

// Get retrieves the AwsConfigConfigurationRecorder from the indexer for a given namespace and name.
func (s awsConfigConfigurationRecorderNamespaceLister) Get(name string) (*v1.AwsConfigConfigurationRecorder, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsconfigconfigurationrecorder"), name)
	}
	return obj.(*v1.AwsConfigConfigurationRecorder), nil
}
