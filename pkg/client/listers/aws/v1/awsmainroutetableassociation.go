/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsMainRouteTableAssociationLister helps list AwsMainRouteTableAssociations.
type AwsMainRouteTableAssociationLister interface {
	// List lists all AwsMainRouteTableAssociations in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsMainRouteTableAssociation, err error)
	// AwsMainRouteTableAssociations returns an object that can list and get AwsMainRouteTableAssociations.
	AwsMainRouteTableAssociations(namespace string) AwsMainRouteTableAssociationNamespaceLister
	AwsMainRouteTableAssociationListerExpansion
}

// awsMainRouteTableAssociationLister implements the AwsMainRouteTableAssociationLister interface.
type awsMainRouteTableAssociationLister struct {
	indexer cache.Indexer
}

// NewAwsMainRouteTableAssociationLister returns a new AwsMainRouteTableAssociationLister.
func NewAwsMainRouteTableAssociationLister(indexer cache.Indexer) AwsMainRouteTableAssociationLister {
	return &awsMainRouteTableAssociationLister{indexer: indexer}
}

// List lists all AwsMainRouteTableAssociations in the indexer.
func (s *awsMainRouteTableAssociationLister) List(selector labels.Selector) (ret []*v1.AwsMainRouteTableAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsMainRouteTableAssociation))
	})
	return ret, err
}

// AwsMainRouteTableAssociations returns an object that can list and get AwsMainRouteTableAssociations.
func (s *awsMainRouteTableAssociationLister) AwsMainRouteTableAssociations(namespace string) AwsMainRouteTableAssociationNamespaceLister {
	return awsMainRouteTableAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsMainRouteTableAssociationNamespaceLister helps list and get AwsMainRouteTableAssociations.
type AwsMainRouteTableAssociationNamespaceLister interface {
	// List lists all AwsMainRouteTableAssociations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsMainRouteTableAssociation, err error)
	// Get retrieves the AwsMainRouteTableAssociation from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsMainRouteTableAssociation, error)
	AwsMainRouteTableAssociationNamespaceListerExpansion
}

// awsMainRouteTableAssociationNamespaceLister implements the AwsMainRouteTableAssociationNamespaceLister
// interface.
type awsMainRouteTableAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsMainRouteTableAssociations in the indexer for a given namespace.
func (s awsMainRouteTableAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsMainRouteTableAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsMainRouteTableAssociation))
	})
	return ret, err
}

// Get retrieves the AwsMainRouteTableAssociation from the indexer for a given namespace and name.
func (s awsMainRouteTableAssociationNamespaceLister) Get(name string) (*v1.AwsMainRouteTableAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsmainroutetableassociation"), name)
	}
	return obj.(*v1.AwsMainRouteTableAssociation), nil
}
