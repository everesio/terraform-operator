/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsRoute53DelegationSetLister helps list AwsRoute53DelegationSets.
type AwsRoute53DelegationSetLister interface {
	// List lists all AwsRoute53DelegationSets in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsRoute53DelegationSet, err error)
	// AwsRoute53DelegationSets returns an object that can list and get AwsRoute53DelegationSets.
	AwsRoute53DelegationSets(namespace string) AwsRoute53DelegationSetNamespaceLister
	AwsRoute53DelegationSetListerExpansion
}

// awsRoute53DelegationSetLister implements the AwsRoute53DelegationSetLister interface.
type awsRoute53DelegationSetLister struct {
	indexer cache.Indexer
}

// NewAwsRoute53DelegationSetLister returns a new AwsRoute53DelegationSetLister.
func NewAwsRoute53DelegationSetLister(indexer cache.Indexer) AwsRoute53DelegationSetLister {
	return &awsRoute53DelegationSetLister{indexer: indexer}
}

// List lists all AwsRoute53DelegationSets in the indexer.
func (s *awsRoute53DelegationSetLister) List(selector labels.Selector) (ret []*v1.AwsRoute53DelegationSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsRoute53DelegationSet))
	})
	return ret, err
}

// AwsRoute53DelegationSets returns an object that can list and get AwsRoute53DelegationSets.
func (s *awsRoute53DelegationSetLister) AwsRoute53DelegationSets(namespace string) AwsRoute53DelegationSetNamespaceLister {
	return awsRoute53DelegationSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsRoute53DelegationSetNamespaceLister helps list and get AwsRoute53DelegationSets.
type AwsRoute53DelegationSetNamespaceLister interface {
	// List lists all AwsRoute53DelegationSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsRoute53DelegationSet, err error)
	// Get retrieves the AwsRoute53DelegationSet from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsRoute53DelegationSet, error)
	AwsRoute53DelegationSetNamespaceListerExpansion
}

// awsRoute53DelegationSetNamespaceLister implements the AwsRoute53DelegationSetNamespaceLister
// interface.
type awsRoute53DelegationSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsRoute53DelegationSets in the indexer for a given namespace.
func (s awsRoute53DelegationSetNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsRoute53DelegationSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsRoute53DelegationSet))
	})
	return ret, err
}

// Get retrieves the AwsRoute53DelegationSet from the indexer for a given namespace and name.
func (s awsRoute53DelegationSetNamespaceLister) Get(name string) (*v1.AwsRoute53DelegationSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsroute53delegationset"), name)
	}
	return obj.(*v1.AwsRoute53DelegationSet), nil
}
