/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsAppsyncDatasourceLister helps list AwsAppsyncDatasources.
type AwsAppsyncDatasourceLister interface {
	// List lists all AwsAppsyncDatasources in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsAppsyncDatasource, err error)
	// AwsAppsyncDatasources returns an object that can list and get AwsAppsyncDatasources.
	AwsAppsyncDatasources(namespace string) AwsAppsyncDatasourceNamespaceLister
	AwsAppsyncDatasourceListerExpansion
}

// awsAppsyncDatasourceLister implements the AwsAppsyncDatasourceLister interface.
type awsAppsyncDatasourceLister struct {
	indexer cache.Indexer
}

// NewAwsAppsyncDatasourceLister returns a new AwsAppsyncDatasourceLister.
func NewAwsAppsyncDatasourceLister(indexer cache.Indexer) AwsAppsyncDatasourceLister {
	return &awsAppsyncDatasourceLister{indexer: indexer}
}

// List lists all AwsAppsyncDatasources in the indexer.
func (s *awsAppsyncDatasourceLister) List(selector labels.Selector) (ret []*v1.AwsAppsyncDatasource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsAppsyncDatasource))
	})
	return ret, err
}

// AwsAppsyncDatasources returns an object that can list and get AwsAppsyncDatasources.
func (s *awsAppsyncDatasourceLister) AwsAppsyncDatasources(namespace string) AwsAppsyncDatasourceNamespaceLister {
	return awsAppsyncDatasourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsAppsyncDatasourceNamespaceLister helps list and get AwsAppsyncDatasources.
type AwsAppsyncDatasourceNamespaceLister interface {
	// List lists all AwsAppsyncDatasources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsAppsyncDatasource, err error)
	// Get retrieves the AwsAppsyncDatasource from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsAppsyncDatasource, error)
	AwsAppsyncDatasourceNamespaceListerExpansion
}

// awsAppsyncDatasourceNamespaceLister implements the AwsAppsyncDatasourceNamespaceLister
// interface.
type awsAppsyncDatasourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsAppsyncDatasources in the indexer for a given namespace.
func (s awsAppsyncDatasourceNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsAppsyncDatasource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsAppsyncDatasource))
	})
	return ret, err
}

// Get retrieves the AwsAppsyncDatasource from the indexer for a given namespace and name.
func (s awsAppsyncDatasourceNamespaceLister) Get(name string) (*v1.AwsAppsyncDatasource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsappsyncdatasource"), name)
	}
	return obj.(*v1.AwsAppsyncDatasource), nil
}
