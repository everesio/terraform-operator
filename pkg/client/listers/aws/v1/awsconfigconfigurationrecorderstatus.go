/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsConfigConfigurationRecorderStatusLister helps list AwsConfigConfigurationRecorderStatuses.
type AwsConfigConfigurationRecorderStatusLister interface {
	// List lists all AwsConfigConfigurationRecorderStatuses in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsConfigConfigurationRecorderStatus, err error)
	// AwsConfigConfigurationRecorderStatuses returns an object that can list and get AwsConfigConfigurationRecorderStatuses.
	AwsConfigConfigurationRecorderStatuses(namespace string) AwsConfigConfigurationRecorderStatusNamespaceLister
	AwsConfigConfigurationRecorderStatusListerExpansion
}

// awsConfigConfigurationRecorderStatusLister implements the AwsConfigConfigurationRecorderStatusLister interface.
type awsConfigConfigurationRecorderStatusLister struct {
	indexer cache.Indexer
}

// NewAwsConfigConfigurationRecorderStatusLister returns a new AwsConfigConfigurationRecorderStatusLister.
func NewAwsConfigConfigurationRecorderStatusLister(indexer cache.Indexer) AwsConfigConfigurationRecorderStatusLister {
	return &awsConfigConfigurationRecorderStatusLister{indexer: indexer}
}

// List lists all AwsConfigConfigurationRecorderStatuses in the indexer.
func (s *awsConfigConfigurationRecorderStatusLister) List(selector labels.Selector) (ret []*v1.AwsConfigConfigurationRecorderStatus, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsConfigConfigurationRecorderStatus))
	})
	return ret, err
}

// AwsConfigConfigurationRecorderStatuses returns an object that can list and get AwsConfigConfigurationRecorderStatuses.
func (s *awsConfigConfigurationRecorderStatusLister) AwsConfigConfigurationRecorderStatuses(namespace string) AwsConfigConfigurationRecorderStatusNamespaceLister {
	return awsConfigConfigurationRecorderStatusNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsConfigConfigurationRecorderStatusNamespaceLister helps list and get AwsConfigConfigurationRecorderStatuses.
type AwsConfigConfigurationRecorderStatusNamespaceLister interface {
	// List lists all AwsConfigConfigurationRecorderStatuses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsConfigConfigurationRecorderStatus, err error)
	// Get retrieves the AwsConfigConfigurationRecorderStatus from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsConfigConfigurationRecorderStatus, error)
	AwsConfigConfigurationRecorderStatusNamespaceListerExpansion
}

// awsConfigConfigurationRecorderStatusNamespaceLister implements the AwsConfigConfigurationRecorderStatusNamespaceLister
// interface.
type awsConfigConfigurationRecorderStatusNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsConfigConfigurationRecorderStatuses in the indexer for a given namespace.
func (s awsConfigConfigurationRecorderStatusNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsConfigConfigurationRecorderStatus, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsConfigConfigurationRecorderStatus))
	})
	return ret, err
}

// Get retrieves the AwsConfigConfigurationRecorderStatus from the indexer for a given namespace and name.
func (s awsConfigConfigurationRecorderStatusNamespaceLister) Get(name string) (*v1.AwsConfigConfigurationRecorderStatus, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsconfigconfigurationrecorderstatus"), name)
	}
	return obj.(*v1.AwsConfigConfigurationRecorderStatus), nil
}
