/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsWafRateBasedRuleLister helps list AwsWafRateBasedRules.
type AwsWafRateBasedRuleLister interface {
	// List lists all AwsWafRateBasedRules in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsWafRateBasedRule, err error)
	// AwsWafRateBasedRules returns an object that can list and get AwsWafRateBasedRules.
	AwsWafRateBasedRules(namespace string) AwsWafRateBasedRuleNamespaceLister
	AwsWafRateBasedRuleListerExpansion
}

// awsWafRateBasedRuleLister implements the AwsWafRateBasedRuleLister interface.
type awsWafRateBasedRuleLister struct {
	indexer cache.Indexer
}

// NewAwsWafRateBasedRuleLister returns a new AwsWafRateBasedRuleLister.
func NewAwsWafRateBasedRuleLister(indexer cache.Indexer) AwsWafRateBasedRuleLister {
	return &awsWafRateBasedRuleLister{indexer: indexer}
}

// List lists all AwsWafRateBasedRules in the indexer.
func (s *awsWafRateBasedRuleLister) List(selector labels.Selector) (ret []*v1.AwsWafRateBasedRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsWafRateBasedRule))
	})
	return ret, err
}

// AwsWafRateBasedRules returns an object that can list and get AwsWafRateBasedRules.
func (s *awsWafRateBasedRuleLister) AwsWafRateBasedRules(namespace string) AwsWafRateBasedRuleNamespaceLister {
	return awsWafRateBasedRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsWafRateBasedRuleNamespaceLister helps list and get AwsWafRateBasedRules.
type AwsWafRateBasedRuleNamespaceLister interface {
	// List lists all AwsWafRateBasedRules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsWafRateBasedRule, err error)
	// Get retrieves the AwsWafRateBasedRule from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsWafRateBasedRule, error)
	AwsWafRateBasedRuleNamespaceListerExpansion
}

// awsWafRateBasedRuleNamespaceLister implements the AwsWafRateBasedRuleNamespaceLister
// interface.
type awsWafRateBasedRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsWafRateBasedRules in the indexer for a given namespace.
func (s awsWafRateBasedRuleNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsWafRateBasedRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsWafRateBasedRule))
	})
	return ret, err
}

// Get retrieves the AwsWafRateBasedRule from the indexer for a given namespace and name.
func (s awsWafRateBasedRuleNamespaceLister) Get(name string) (*v1.AwsWafRateBasedRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awswafratebasedrule"), name)
	}
	return obj.(*v1.AwsWafRateBasedRule), nil
}
