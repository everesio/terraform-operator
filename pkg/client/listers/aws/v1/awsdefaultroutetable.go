/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsDefaultRouteTableLister helps list AwsDefaultRouteTables.
type AwsDefaultRouteTableLister interface {
	// List lists all AwsDefaultRouteTables in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsDefaultRouteTable, err error)
	// AwsDefaultRouteTables returns an object that can list and get AwsDefaultRouteTables.
	AwsDefaultRouteTables(namespace string) AwsDefaultRouteTableNamespaceLister
	AwsDefaultRouteTableListerExpansion
}

// awsDefaultRouteTableLister implements the AwsDefaultRouteTableLister interface.
type awsDefaultRouteTableLister struct {
	indexer cache.Indexer
}

// NewAwsDefaultRouteTableLister returns a new AwsDefaultRouteTableLister.
func NewAwsDefaultRouteTableLister(indexer cache.Indexer) AwsDefaultRouteTableLister {
	return &awsDefaultRouteTableLister{indexer: indexer}
}

// List lists all AwsDefaultRouteTables in the indexer.
func (s *awsDefaultRouteTableLister) List(selector labels.Selector) (ret []*v1.AwsDefaultRouteTable, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsDefaultRouteTable))
	})
	return ret, err
}

// AwsDefaultRouteTables returns an object that can list and get AwsDefaultRouteTables.
func (s *awsDefaultRouteTableLister) AwsDefaultRouteTables(namespace string) AwsDefaultRouteTableNamespaceLister {
	return awsDefaultRouteTableNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsDefaultRouteTableNamespaceLister helps list and get AwsDefaultRouteTables.
type AwsDefaultRouteTableNamespaceLister interface {
	// List lists all AwsDefaultRouteTables in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsDefaultRouteTable, err error)
	// Get retrieves the AwsDefaultRouteTable from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsDefaultRouteTable, error)
	AwsDefaultRouteTableNamespaceListerExpansion
}

// awsDefaultRouteTableNamespaceLister implements the AwsDefaultRouteTableNamespaceLister
// interface.
type awsDefaultRouteTableNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsDefaultRouteTables in the indexer for a given namespace.
func (s awsDefaultRouteTableNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsDefaultRouteTable, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsDefaultRouteTable))
	})
	return ret, err
}

// Get retrieves the AwsDefaultRouteTable from the indexer for a given namespace and name.
func (s awsDefaultRouteTableNamespaceLister) Get(name string) (*v1.AwsDefaultRouteTable, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsdefaultroutetable"), name)
	}
	return obj.(*v1.AwsDefaultRouteTable), nil
}
