/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsElasticacheClusterLister helps list AwsElasticacheClusters.
type AwsElasticacheClusterLister interface {
	// List lists all AwsElasticacheClusters in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsElasticacheCluster, err error)
	// AwsElasticacheClusters returns an object that can list and get AwsElasticacheClusters.
	AwsElasticacheClusters(namespace string) AwsElasticacheClusterNamespaceLister
	AwsElasticacheClusterListerExpansion
}

// awsElasticacheClusterLister implements the AwsElasticacheClusterLister interface.
type awsElasticacheClusterLister struct {
	indexer cache.Indexer
}

// NewAwsElasticacheClusterLister returns a new AwsElasticacheClusterLister.
func NewAwsElasticacheClusterLister(indexer cache.Indexer) AwsElasticacheClusterLister {
	return &awsElasticacheClusterLister{indexer: indexer}
}

// List lists all AwsElasticacheClusters in the indexer.
func (s *awsElasticacheClusterLister) List(selector labels.Selector) (ret []*v1.AwsElasticacheCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsElasticacheCluster))
	})
	return ret, err
}

// AwsElasticacheClusters returns an object that can list and get AwsElasticacheClusters.
func (s *awsElasticacheClusterLister) AwsElasticacheClusters(namespace string) AwsElasticacheClusterNamespaceLister {
	return awsElasticacheClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsElasticacheClusterNamespaceLister helps list and get AwsElasticacheClusters.
type AwsElasticacheClusterNamespaceLister interface {
	// List lists all AwsElasticacheClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsElasticacheCluster, err error)
	// Get retrieves the AwsElasticacheCluster from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsElasticacheCluster, error)
	AwsElasticacheClusterNamespaceListerExpansion
}

// awsElasticacheClusterNamespaceLister implements the AwsElasticacheClusterNamespaceLister
// interface.
type awsElasticacheClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsElasticacheClusters in the indexer for a given namespace.
func (s awsElasticacheClusterNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsElasticacheCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsElasticacheCluster))
	})
	return ret, err
}

// Get retrieves the AwsElasticacheCluster from the indexer for a given namespace and name.
func (s awsElasticacheClusterNamespaceLister) Get(name string) (*v1.AwsElasticacheCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awselasticachecluster"), name)
	}
	return obj.(*v1.AwsElasticacheCluster), nil
}
