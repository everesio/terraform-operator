/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsSesEventDestinationLister helps list AwsSesEventDestinations.
type AwsSesEventDestinationLister interface {
	// List lists all AwsSesEventDestinations in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsSesEventDestination, err error)
	// AwsSesEventDestinations returns an object that can list and get AwsSesEventDestinations.
	AwsSesEventDestinations(namespace string) AwsSesEventDestinationNamespaceLister
	AwsSesEventDestinationListerExpansion
}

// awsSesEventDestinationLister implements the AwsSesEventDestinationLister interface.
type awsSesEventDestinationLister struct {
	indexer cache.Indexer
}

// NewAwsSesEventDestinationLister returns a new AwsSesEventDestinationLister.
func NewAwsSesEventDestinationLister(indexer cache.Indexer) AwsSesEventDestinationLister {
	return &awsSesEventDestinationLister{indexer: indexer}
}

// List lists all AwsSesEventDestinations in the indexer.
func (s *awsSesEventDestinationLister) List(selector labels.Selector) (ret []*v1.AwsSesEventDestination, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsSesEventDestination))
	})
	return ret, err
}

// AwsSesEventDestinations returns an object that can list and get AwsSesEventDestinations.
func (s *awsSesEventDestinationLister) AwsSesEventDestinations(namespace string) AwsSesEventDestinationNamespaceLister {
	return awsSesEventDestinationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsSesEventDestinationNamespaceLister helps list and get AwsSesEventDestinations.
type AwsSesEventDestinationNamespaceLister interface {
	// List lists all AwsSesEventDestinations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsSesEventDestination, err error)
	// Get retrieves the AwsSesEventDestination from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsSesEventDestination, error)
	AwsSesEventDestinationNamespaceListerExpansion
}

// awsSesEventDestinationNamespaceLister implements the AwsSesEventDestinationNamespaceLister
// interface.
type awsSesEventDestinationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsSesEventDestinations in the indexer for a given namespace.
func (s awsSesEventDestinationNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsSesEventDestination, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsSesEventDestination))
	})
	return ret, err
}

// Get retrieves the AwsSesEventDestination from the indexer for a given namespace and name.
func (s awsSesEventDestinationNamespaceLister) Get(name string) (*v1.AwsSesEventDestination, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsseseventdestination"), name)
	}
	return obj.(*v1.AwsSesEventDestination), nil
}
