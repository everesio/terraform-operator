/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsVpcPeeringConnectionLister helps list AwsVpcPeeringConnections.
type AwsVpcPeeringConnectionLister interface {
	// List lists all AwsVpcPeeringConnections in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsVpcPeeringConnection, err error)
	// AwsVpcPeeringConnections returns an object that can list and get AwsVpcPeeringConnections.
	AwsVpcPeeringConnections(namespace string) AwsVpcPeeringConnectionNamespaceLister
	AwsVpcPeeringConnectionListerExpansion
}

// awsVpcPeeringConnectionLister implements the AwsVpcPeeringConnectionLister interface.
type awsVpcPeeringConnectionLister struct {
	indexer cache.Indexer
}

// NewAwsVpcPeeringConnectionLister returns a new AwsVpcPeeringConnectionLister.
func NewAwsVpcPeeringConnectionLister(indexer cache.Indexer) AwsVpcPeeringConnectionLister {
	return &awsVpcPeeringConnectionLister{indexer: indexer}
}

// List lists all AwsVpcPeeringConnections in the indexer.
func (s *awsVpcPeeringConnectionLister) List(selector labels.Selector) (ret []*v1.AwsVpcPeeringConnection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsVpcPeeringConnection))
	})
	return ret, err
}

// AwsVpcPeeringConnections returns an object that can list and get AwsVpcPeeringConnections.
func (s *awsVpcPeeringConnectionLister) AwsVpcPeeringConnections(namespace string) AwsVpcPeeringConnectionNamespaceLister {
	return awsVpcPeeringConnectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsVpcPeeringConnectionNamespaceLister helps list and get AwsVpcPeeringConnections.
type AwsVpcPeeringConnectionNamespaceLister interface {
	// List lists all AwsVpcPeeringConnections in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsVpcPeeringConnection, err error)
	// Get retrieves the AwsVpcPeeringConnection from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsVpcPeeringConnection, error)
	AwsVpcPeeringConnectionNamespaceListerExpansion
}

// awsVpcPeeringConnectionNamespaceLister implements the AwsVpcPeeringConnectionNamespaceLister
// interface.
type awsVpcPeeringConnectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsVpcPeeringConnections in the indexer for a given namespace.
func (s awsVpcPeeringConnectionNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsVpcPeeringConnection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsVpcPeeringConnection))
	})
	return ret, err
}

// Get retrieves the AwsVpcPeeringConnection from the indexer for a given namespace and name.
func (s awsVpcPeeringConnectionNamespaceLister) Get(name string) (*v1.AwsVpcPeeringConnection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsvpcpeeringconnection"), name)
	}
	return obj.(*v1.AwsVpcPeeringConnection), nil
}
