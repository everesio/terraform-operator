/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsSsmMaintenanceWindowTargetLister helps list AwsSsmMaintenanceWindowTargets.
type AwsSsmMaintenanceWindowTargetLister interface {
	// List lists all AwsSsmMaintenanceWindowTargets in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsSsmMaintenanceWindowTarget, err error)
	// AwsSsmMaintenanceWindowTargets returns an object that can list and get AwsSsmMaintenanceWindowTargets.
	AwsSsmMaintenanceWindowTargets(namespace string) AwsSsmMaintenanceWindowTargetNamespaceLister
	AwsSsmMaintenanceWindowTargetListerExpansion
}

// awsSsmMaintenanceWindowTargetLister implements the AwsSsmMaintenanceWindowTargetLister interface.
type awsSsmMaintenanceWindowTargetLister struct {
	indexer cache.Indexer
}

// NewAwsSsmMaintenanceWindowTargetLister returns a new AwsSsmMaintenanceWindowTargetLister.
func NewAwsSsmMaintenanceWindowTargetLister(indexer cache.Indexer) AwsSsmMaintenanceWindowTargetLister {
	return &awsSsmMaintenanceWindowTargetLister{indexer: indexer}
}

// List lists all AwsSsmMaintenanceWindowTargets in the indexer.
func (s *awsSsmMaintenanceWindowTargetLister) List(selector labels.Selector) (ret []*v1.AwsSsmMaintenanceWindowTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsSsmMaintenanceWindowTarget))
	})
	return ret, err
}

// AwsSsmMaintenanceWindowTargets returns an object that can list and get AwsSsmMaintenanceWindowTargets.
func (s *awsSsmMaintenanceWindowTargetLister) AwsSsmMaintenanceWindowTargets(namespace string) AwsSsmMaintenanceWindowTargetNamespaceLister {
	return awsSsmMaintenanceWindowTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsSsmMaintenanceWindowTargetNamespaceLister helps list and get AwsSsmMaintenanceWindowTargets.
type AwsSsmMaintenanceWindowTargetNamespaceLister interface {
	// List lists all AwsSsmMaintenanceWindowTargets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsSsmMaintenanceWindowTarget, err error)
	// Get retrieves the AwsSsmMaintenanceWindowTarget from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsSsmMaintenanceWindowTarget, error)
	AwsSsmMaintenanceWindowTargetNamespaceListerExpansion
}

// awsSsmMaintenanceWindowTargetNamespaceLister implements the AwsSsmMaintenanceWindowTargetNamespaceLister
// interface.
type awsSsmMaintenanceWindowTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsSsmMaintenanceWindowTargets in the indexer for a given namespace.
func (s awsSsmMaintenanceWindowTargetNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsSsmMaintenanceWindowTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsSsmMaintenanceWindowTarget))
	})
	return ret, err
}

// Get retrieves the AwsSsmMaintenanceWindowTarget from the indexer for a given namespace and name.
func (s awsSsmMaintenanceWindowTargetNamespaceLister) Get(name string) (*v1.AwsSsmMaintenanceWindowTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsssmmaintenancewindowtarget"), name)
	}
	return obj.(*v1.AwsSsmMaintenanceWindowTarget), nil
}
