/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsWafregionalWebAclLister helps list AwsWafregionalWebAcls.
type AwsWafregionalWebAclLister interface {
	// List lists all AwsWafregionalWebAcls in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsWafregionalWebAcl, err error)
	// AwsWafregionalWebAcls returns an object that can list and get AwsWafregionalWebAcls.
	AwsWafregionalWebAcls(namespace string) AwsWafregionalWebAclNamespaceLister
	AwsWafregionalWebAclListerExpansion
}

// awsWafregionalWebAclLister implements the AwsWafregionalWebAclLister interface.
type awsWafregionalWebAclLister struct {
	indexer cache.Indexer
}

// NewAwsWafregionalWebAclLister returns a new AwsWafregionalWebAclLister.
func NewAwsWafregionalWebAclLister(indexer cache.Indexer) AwsWafregionalWebAclLister {
	return &awsWafregionalWebAclLister{indexer: indexer}
}

// List lists all AwsWafregionalWebAcls in the indexer.
func (s *awsWafregionalWebAclLister) List(selector labels.Selector) (ret []*v1.AwsWafregionalWebAcl, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsWafregionalWebAcl))
	})
	return ret, err
}

// AwsWafregionalWebAcls returns an object that can list and get AwsWafregionalWebAcls.
func (s *awsWafregionalWebAclLister) AwsWafregionalWebAcls(namespace string) AwsWafregionalWebAclNamespaceLister {
	return awsWafregionalWebAclNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsWafregionalWebAclNamespaceLister helps list and get AwsWafregionalWebAcls.
type AwsWafregionalWebAclNamespaceLister interface {
	// List lists all AwsWafregionalWebAcls in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsWafregionalWebAcl, err error)
	// Get retrieves the AwsWafregionalWebAcl from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsWafregionalWebAcl, error)
	AwsWafregionalWebAclNamespaceListerExpansion
}

// awsWafregionalWebAclNamespaceLister implements the AwsWafregionalWebAclNamespaceLister
// interface.
type awsWafregionalWebAclNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsWafregionalWebAcls in the indexer for a given namespace.
func (s awsWafregionalWebAclNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsWafregionalWebAcl, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsWafregionalWebAcl))
	})
	return ret, err
}

// Get retrieves the AwsWafregionalWebAcl from the indexer for a given namespace and name.
func (s awsWafregionalWebAclNamespaceLister) Get(name string) (*v1.AwsWafregionalWebAcl, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awswafregionalwebacl"), name)
	}
	return obj.(*v1.AwsWafregionalWebAcl), nil
}
