/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsVpcEndpointConnectionNotificationLister helps list AwsVpcEndpointConnectionNotifications.
type AwsVpcEndpointConnectionNotificationLister interface {
	// List lists all AwsVpcEndpointConnectionNotifications in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsVpcEndpointConnectionNotification, err error)
	// AwsVpcEndpointConnectionNotifications returns an object that can list and get AwsVpcEndpointConnectionNotifications.
	AwsVpcEndpointConnectionNotifications(namespace string) AwsVpcEndpointConnectionNotificationNamespaceLister
	AwsVpcEndpointConnectionNotificationListerExpansion
}

// awsVpcEndpointConnectionNotificationLister implements the AwsVpcEndpointConnectionNotificationLister interface.
type awsVpcEndpointConnectionNotificationLister struct {
	indexer cache.Indexer
}

// NewAwsVpcEndpointConnectionNotificationLister returns a new AwsVpcEndpointConnectionNotificationLister.
func NewAwsVpcEndpointConnectionNotificationLister(indexer cache.Indexer) AwsVpcEndpointConnectionNotificationLister {
	return &awsVpcEndpointConnectionNotificationLister{indexer: indexer}
}

// List lists all AwsVpcEndpointConnectionNotifications in the indexer.
func (s *awsVpcEndpointConnectionNotificationLister) List(selector labels.Selector) (ret []*v1.AwsVpcEndpointConnectionNotification, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsVpcEndpointConnectionNotification))
	})
	return ret, err
}

// AwsVpcEndpointConnectionNotifications returns an object that can list and get AwsVpcEndpointConnectionNotifications.
func (s *awsVpcEndpointConnectionNotificationLister) AwsVpcEndpointConnectionNotifications(namespace string) AwsVpcEndpointConnectionNotificationNamespaceLister {
	return awsVpcEndpointConnectionNotificationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsVpcEndpointConnectionNotificationNamespaceLister helps list and get AwsVpcEndpointConnectionNotifications.
type AwsVpcEndpointConnectionNotificationNamespaceLister interface {
	// List lists all AwsVpcEndpointConnectionNotifications in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsVpcEndpointConnectionNotification, err error)
	// Get retrieves the AwsVpcEndpointConnectionNotification from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsVpcEndpointConnectionNotification, error)
	AwsVpcEndpointConnectionNotificationNamespaceListerExpansion
}

// awsVpcEndpointConnectionNotificationNamespaceLister implements the AwsVpcEndpointConnectionNotificationNamespaceLister
// interface.
type awsVpcEndpointConnectionNotificationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsVpcEndpointConnectionNotifications in the indexer for a given namespace.
func (s awsVpcEndpointConnectionNotificationNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsVpcEndpointConnectionNotification, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsVpcEndpointConnectionNotification))
	})
	return ret, err
}

// Get retrieves the AwsVpcEndpointConnectionNotification from the indexer for a given namespace and name.
func (s awsVpcEndpointConnectionNotificationNamespaceLister) Get(name string) (*v1.AwsVpcEndpointConnectionNotification, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsvpcendpointconnectionnotification"), name)
	}
	return obj.(*v1.AwsVpcEndpointConnectionNotification), nil
}
