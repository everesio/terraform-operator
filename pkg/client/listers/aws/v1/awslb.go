/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsLbLister helps list AwsLbs.
type AwsLbLister interface {
	// List lists all AwsLbs in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsLb, err error)
	// AwsLbs returns an object that can list and get AwsLbs.
	AwsLbs(namespace string) AwsLbNamespaceLister
	AwsLbListerExpansion
}

// awsLbLister implements the AwsLbLister interface.
type awsLbLister struct {
	indexer cache.Indexer
}

// NewAwsLbLister returns a new AwsLbLister.
func NewAwsLbLister(indexer cache.Indexer) AwsLbLister {
	return &awsLbLister{indexer: indexer}
}

// List lists all AwsLbs in the indexer.
func (s *awsLbLister) List(selector labels.Selector) (ret []*v1.AwsLb, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsLb))
	})
	return ret, err
}

// AwsLbs returns an object that can list and get AwsLbs.
func (s *awsLbLister) AwsLbs(namespace string) AwsLbNamespaceLister {
	return awsLbNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsLbNamespaceLister helps list and get AwsLbs.
type AwsLbNamespaceLister interface {
	// List lists all AwsLbs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsLb, err error)
	// Get retrieves the AwsLb from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsLb, error)
	AwsLbNamespaceListerExpansion
}

// awsLbNamespaceLister implements the AwsLbNamespaceLister
// interface.
type awsLbNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsLbs in the indexer for a given namespace.
func (s awsLbNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsLb, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsLb))
	})
	return ret, err
}

// Get retrieves the AwsLb from the indexer for a given namespace and name.
func (s awsLbNamespaceLister) Get(name string) (*v1.AwsLb, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awslb"), name)
	}
	return obj.(*v1.AwsLb), nil
}
