/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsProxyProtocolPolicyLister helps list AwsProxyProtocolPolicies.
type AwsProxyProtocolPolicyLister interface {
	// List lists all AwsProxyProtocolPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsProxyProtocolPolicy, err error)
	// AwsProxyProtocolPolicies returns an object that can list and get AwsProxyProtocolPolicies.
	AwsProxyProtocolPolicies(namespace string) AwsProxyProtocolPolicyNamespaceLister
	AwsProxyProtocolPolicyListerExpansion
}

// awsProxyProtocolPolicyLister implements the AwsProxyProtocolPolicyLister interface.
type awsProxyProtocolPolicyLister struct {
	indexer cache.Indexer
}

// NewAwsProxyProtocolPolicyLister returns a new AwsProxyProtocolPolicyLister.
func NewAwsProxyProtocolPolicyLister(indexer cache.Indexer) AwsProxyProtocolPolicyLister {
	return &awsProxyProtocolPolicyLister{indexer: indexer}
}

// List lists all AwsProxyProtocolPolicies in the indexer.
func (s *awsProxyProtocolPolicyLister) List(selector labels.Selector) (ret []*v1.AwsProxyProtocolPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsProxyProtocolPolicy))
	})
	return ret, err
}

// AwsProxyProtocolPolicies returns an object that can list and get AwsProxyProtocolPolicies.
func (s *awsProxyProtocolPolicyLister) AwsProxyProtocolPolicies(namespace string) AwsProxyProtocolPolicyNamespaceLister {
	return awsProxyProtocolPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsProxyProtocolPolicyNamespaceLister helps list and get AwsProxyProtocolPolicies.
type AwsProxyProtocolPolicyNamespaceLister interface {
	// List lists all AwsProxyProtocolPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsProxyProtocolPolicy, err error)
	// Get retrieves the AwsProxyProtocolPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsProxyProtocolPolicy, error)
	AwsProxyProtocolPolicyNamespaceListerExpansion
}

// awsProxyProtocolPolicyNamespaceLister implements the AwsProxyProtocolPolicyNamespaceLister
// interface.
type awsProxyProtocolPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsProxyProtocolPolicies in the indexer for a given namespace.
func (s awsProxyProtocolPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsProxyProtocolPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsProxyProtocolPolicy))
	})
	return ret, err
}

// Get retrieves the AwsProxyProtocolPolicy from the indexer for a given namespace and name.
func (s awsProxyProtocolPolicyNamespaceLister) Get(name string) (*v1.AwsProxyProtocolPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsproxyprotocolpolicy"), name)
	}
	return obj.(*v1.AwsProxyProtocolPolicy), nil
}
