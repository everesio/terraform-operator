/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsAthenaNamedQueryLister helps list AwsAthenaNamedQueries.
type AwsAthenaNamedQueryLister interface {
	// List lists all AwsAthenaNamedQueries in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsAthenaNamedQuery, err error)
	// AwsAthenaNamedQueries returns an object that can list and get AwsAthenaNamedQueries.
	AwsAthenaNamedQueries(namespace string) AwsAthenaNamedQueryNamespaceLister
	AwsAthenaNamedQueryListerExpansion
}

// awsAthenaNamedQueryLister implements the AwsAthenaNamedQueryLister interface.
type awsAthenaNamedQueryLister struct {
	indexer cache.Indexer
}

// NewAwsAthenaNamedQueryLister returns a new AwsAthenaNamedQueryLister.
func NewAwsAthenaNamedQueryLister(indexer cache.Indexer) AwsAthenaNamedQueryLister {
	return &awsAthenaNamedQueryLister{indexer: indexer}
}

// List lists all AwsAthenaNamedQueries in the indexer.
func (s *awsAthenaNamedQueryLister) List(selector labels.Selector) (ret []*v1.AwsAthenaNamedQuery, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsAthenaNamedQuery))
	})
	return ret, err
}

// AwsAthenaNamedQueries returns an object that can list and get AwsAthenaNamedQueries.
func (s *awsAthenaNamedQueryLister) AwsAthenaNamedQueries(namespace string) AwsAthenaNamedQueryNamespaceLister {
	return awsAthenaNamedQueryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsAthenaNamedQueryNamespaceLister helps list and get AwsAthenaNamedQueries.
type AwsAthenaNamedQueryNamespaceLister interface {
	// List lists all AwsAthenaNamedQueries in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsAthenaNamedQuery, err error)
	// Get retrieves the AwsAthenaNamedQuery from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsAthenaNamedQuery, error)
	AwsAthenaNamedQueryNamespaceListerExpansion
}

// awsAthenaNamedQueryNamespaceLister implements the AwsAthenaNamedQueryNamespaceLister
// interface.
type awsAthenaNamedQueryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsAthenaNamedQueries in the indexer for a given namespace.
func (s awsAthenaNamedQueryNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsAthenaNamedQuery, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsAthenaNamedQuery))
	})
	return ret, err
}

// Get retrieves the AwsAthenaNamedQuery from the indexer for a given namespace and name.
func (s awsAthenaNamedQueryNamespaceLister) Get(name string) (*v1.AwsAthenaNamedQuery, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsathenanamedquery"), name)
	}
	return obj.(*v1.AwsAthenaNamedQuery), nil
}
