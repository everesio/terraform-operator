/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsRouteTableAssociationLister helps list AwsRouteTableAssociations.
type AwsRouteTableAssociationLister interface {
	// List lists all AwsRouteTableAssociations in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsRouteTableAssociation, err error)
	// AwsRouteTableAssociations returns an object that can list and get AwsRouteTableAssociations.
	AwsRouteTableAssociations(namespace string) AwsRouteTableAssociationNamespaceLister
	AwsRouteTableAssociationListerExpansion
}

// awsRouteTableAssociationLister implements the AwsRouteTableAssociationLister interface.
type awsRouteTableAssociationLister struct {
	indexer cache.Indexer
}

// NewAwsRouteTableAssociationLister returns a new AwsRouteTableAssociationLister.
func NewAwsRouteTableAssociationLister(indexer cache.Indexer) AwsRouteTableAssociationLister {
	return &awsRouteTableAssociationLister{indexer: indexer}
}

// List lists all AwsRouteTableAssociations in the indexer.
func (s *awsRouteTableAssociationLister) List(selector labels.Selector) (ret []*v1.AwsRouteTableAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsRouteTableAssociation))
	})
	return ret, err
}

// AwsRouteTableAssociations returns an object that can list and get AwsRouteTableAssociations.
func (s *awsRouteTableAssociationLister) AwsRouteTableAssociations(namespace string) AwsRouteTableAssociationNamespaceLister {
	return awsRouteTableAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsRouteTableAssociationNamespaceLister helps list and get AwsRouteTableAssociations.
type AwsRouteTableAssociationNamespaceLister interface {
	// List lists all AwsRouteTableAssociations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsRouteTableAssociation, err error)
	// Get retrieves the AwsRouteTableAssociation from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsRouteTableAssociation, error)
	AwsRouteTableAssociationNamespaceListerExpansion
}

// awsRouteTableAssociationNamespaceLister implements the AwsRouteTableAssociationNamespaceLister
// interface.
type awsRouteTableAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsRouteTableAssociations in the indexer for a given namespace.
func (s awsRouteTableAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsRouteTableAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsRouteTableAssociation))
	})
	return ret, err
}

// Get retrieves the AwsRouteTableAssociation from the indexer for a given namespace and name.
func (s awsRouteTableAssociationNamespaceLister) Get(name string) (*v1.AwsRouteTableAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsroutetableassociation"), name)
	}
	return obj.(*v1.AwsRouteTableAssociation), nil
}
