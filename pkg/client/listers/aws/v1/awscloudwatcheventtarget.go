/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsCloudwatchEventTargetLister helps list AwsCloudwatchEventTargets.
type AwsCloudwatchEventTargetLister interface {
	// List lists all AwsCloudwatchEventTargets in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsCloudwatchEventTarget, err error)
	// AwsCloudwatchEventTargets returns an object that can list and get AwsCloudwatchEventTargets.
	AwsCloudwatchEventTargets(namespace string) AwsCloudwatchEventTargetNamespaceLister
	AwsCloudwatchEventTargetListerExpansion
}

// awsCloudwatchEventTargetLister implements the AwsCloudwatchEventTargetLister interface.
type awsCloudwatchEventTargetLister struct {
	indexer cache.Indexer
}

// NewAwsCloudwatchEventTargetLister returns a new AwsCloudwatchEventTargetLister.
func NewAwsCloudwatchEventTargetLister(indexer cache.Indexer) AwsCloudwatchEventTargetLister {
	return &awsCloudwatchEventTargetLister{indexer: indexer}
}

// List lists all AwsCloudwatchEventTargets in the indexer.
func (s *awsCloudwatchEventTargetLister) List(selector labels.Selector) (ret []*v1.AwsCloudwatchEventTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsCloudwatchEventTarget))
	})
	return ret, err
}

// AwsCloudwatchEventTargets returns an object that can list and get AwsCloudwatchEventTargets.
func (s *awsCloudwatchEventTargetLister) AwsCloudwatchEventTargets(namespace string) AwsCloudwatchEventTargetNamespaceLister {
	return awsCloudwatchEventTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsCloudwatchEventTargetNamespaceLister helps list and get AwsCloudwatchEventTargets.
type AwsCloudwatchEventTargetNamespaceLister interface {
	// List lists all AwsCloudwatchEventTargets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsCloudwatchEventTarget, err error)
	// Get retrieves the AwsCloudwatchEventTarget from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsCloudwatchEventTarget, error)
	AwsCloudwatchEventTargetNamespaceListerExpansion
}

// awsCloudwatchEventTargetNamespaceLister implements the AwsCloudwatchEventTargetNamespaceLister
// interface.
type awsCloudwatchEventTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsCloudwatchEventTargets in the indexer for a given namespace.
func (s awsCloudwatchEventTargetNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsCloudwatchEventTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsCloudwatchEventTarget))
	})
	return ret, err
}

// Get retrieves the AwsCloudwatchEventTarget from the indexer for a given namespace and name.
func (s awsCloudwatchEventTargetNamespaceLister) Get(name string) (*v1.AwsCloudwatchEventTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awscloudwatcheventtarget"), name)
	}
	return obj.(*v1.AwsCloudwatchEventTarget), nil
}
