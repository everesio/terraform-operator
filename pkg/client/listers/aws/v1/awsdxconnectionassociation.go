/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsDxConnectionAssociationLister helps list AwsDxConnectionAssociations.
type AwsDxConnectionAssociationLister interface {
	// List lists all AwsDxConnectionAssociations in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsDxConnectionAssociation, err error)
	// AwsDxConnectionAssociations returns an object that can list and get AwsDxConnectionAssociations.
	AwsDxConnectionAssociations(namespace string) AwsDxConnectionAssociationNamespaceLister
	AwsDxConnectionAssociationListerExpansion
}

// awsDxConnectionAssociationLister implements the AwsDxConnectionAssociationLister interface.
type awsDxConnectionAssociationLister struct {
	indexer cache.Indexer
}

// NewAwsDxConnectionAssociationLister returns a new AwsDxConnectionAssociationLister.
func NewAwsDxConnectionAssociationLister(indexer cache.Indexer) AwsDxConnectionAssociationLister {
	return &awsDxConnectionAssociationLister{indexer: indexer}
}

// List lists all AwsDxConnectionAssociations in the indexer.
func (s *awsDxConnectionAssociationLister) List(selector labels.Selector) (ret []*v1.AwsDxConnectionAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsDxConnectionAssociation))
	})
	return ret, err
}

// AwsDxConnectionAssociations returns an object that can list and get AwsDxConnectionAssociations.
func (s *awsDxConnectionAssociationLister) AwsDxConnectionAssociations(namespace string) AwsDxConnectionAssociationNamespaceLister {
	return awsDxConnectionAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsDxConnectionAssociationNamespaceLister helps list and get AwsDxConnectionAssociations.
type AwsDxConnectionAssociationNamespaceLister interface {
	// List lists all AwsDxConnectionAssociations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsDxConnectionAssociation, err error)
	// Get retrieves the AwsDxConnectionAssociation from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsDxConnectionAssociation, error)
	AwsDxConnectionAssociationNamespaceListerExpansion
}

// awsDxConnectionAssociationNamespaceLister implements the AwsDxConnectionAssociationNamespaceLister
// interface.
type awsDxConnectionAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsDxConnectionAssociations in the indexer for a given namespace.
func (s awsDxConnectionAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsDxConnectionAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsDxConnectionAssociation))
	})
	return ret, err
}

// Get retrieves the AwsDxConnectionAssociation from the indexer for a given namespace and name.
func (s awsDxConnectionAssociationNamespaceLister) Get(name string) (*v1.AwsDxConnectionAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsdxconnectionassociation"), name)
	}
	return obj.(*v1.AwsDxConnectionAssociation), nil
}
