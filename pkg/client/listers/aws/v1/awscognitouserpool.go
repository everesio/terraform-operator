/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsCognitoUserPoolLister helps list AwsCognitoUserPools.
type AwsCognitoUserPoolLister interface {
	// List lists all AwsCognitoUserPools in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsCognitoUserPool, err error)
	// AwsCognitoUserPools returns an object that can list and get AwsCognitoUserPools.
	AwsCognitoUserPools(namespace string) AwsCognitoUserPoolNamespaceLister
	AwsCognitoUserPoolListerExpansion
}

// awsCognitoUserPoolLister implements the AwsCognitoUserPoolLister interface.
type awsCognitoUserPoolLister struct {
	indexer cache.Indexer
}

// NewAwsCognitoUserPoolLister returns a new AwsCognitoUserPoolLister.
func NewAwsCognitoUserPoolLister(indexer cache.Indexer) AwsCognitoUserPoolLister {
	return &awsCognitoUserPoolLister{indexer: indexer}
}

// List lists all AwsCognitoUserPools in the indexer.
func (s *awsCognitoUserPoolLister) List(selector labels.Selector) (ret []*v1.AwsCognitoUserPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsCognitoUserPool))
	})
	return ret, err
}

// AwsCognitoUserPools returns an object that can list and get AwsCognitoUserPools.
func (s *awsCognitoUserPoolLister) AwsCognitoUserPools(namespace string) AwsCognitoUserPoolNamespaceLister {
	return awsCognitoUserPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsCognitoUserPoolNamespaceLister helps list and get AwsCognitoUserPools.
type AwsCognitoUserPoolNamespaceLister interface {
	// List lists all AwsCognitoUserPools in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsCognitoUserPool, err error)
	// Get retrieves the AwsCognitoUserPool from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsCognitoUserPool, error)
	AwsCognitoUserPoolNamespaceListerExpansion
}

// awsCognitoUserPoolNamespaceLister implements the AwsCognitoUserPoolNamespaceLister
// interface.
type awsCognitoUserPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsCognitoUserPools in the indexer for a given namespace.
func (s awsCognitoUserPoolNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsCognitoUserPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsCognitoUserPool))
	})
	return ret, err
}

// Get retrieves the AwsCognitoUserPool from the indexer for a given namespace and name.
func (s awsCognitoUserPoolNamespaceLister) Get(name string) (*v1.AwsCognitoUserPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awscognitouserpool"), name)
	}
	return obj.(*v1.AwsCognitoUserPool), nil
}
