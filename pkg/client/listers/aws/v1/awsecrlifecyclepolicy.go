/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsEcrLifecyclePolicyLister helps list AwsEcrLifecyclePolicies.
type AwsEcrLifecyclePolicyLister interface {
	// List lists all AwsEcrLifecyclePolicies in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsEcrLifecyclePolicy, err error)
	// AwsEcrLifecyclePolicies returns an object that can list and get AwsEcrLifecyclePolicies.
	AwsEcrLifecyclePolicies(namespace string) AwsEcrLifecyclePolicyNamespaceLister
	AwsEcrLifecyclePolicyListerExpansion
}

// awsEcrLifecyclePolicyLister implements the AwsEcrLifecyclePolicyLister interface.
type awsEcrLifecyclePolicyLister struct {
	indexer cache.Indexer
}

// NewAwsEcrLifecyclePolicyLister returns a new AwsEcrLifecyclePolicyLister.
func NewAwsEcrLifecyclePolicyLister(indexer cache.Indexer) AwsEcrLifecyclePolicyLister {
	return &awsEcrLifecyclePolicyLister{indexer: indexer}
}

// List lists all AwsEcrLifecyclePolicies in the indexer.
func (s *awsEcrLifecyclePolicyLister) List(selector labels.Selector) (ret []*v1.AwsEcrLifecyclePolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsEcrLifecyclePolicy))
	})
	return ret, err
}

// AwsEcrLifecyclePolicies returns an object that can list and get AwsEcrLifecyclePolicies.
func (s *awsEcrLifecyclePolicyLister) AwsEcrLifecyclePolicies(namespace string) AwsEcrLifecyclePolicyNamespaceLister {
	return awsEcrLifecyclePolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsEcrLifecyclePolicyNamespaceLister helps list and get AwsEcrLifecyclePolicies.
type AwsEcrLifecyclePolicyNamespaceLister interface {
	// List lists all AwsEcrLifecyclePolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsEcrLifecyclePolicy, err error)
	// Get retrieves the AwsEcrLifecyclePolicy from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsEcrLifecyclePolicy, error)
	AwsEcrLifecyclePolicyNamespaceListerExpansion
}

// awsEcrLifecyclePolicyNamespaceLister implements the AwsEcrLifecyclePolicyNamespaceLister
// interface.
type awsEcrLifecyclePolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsEcrLifecyclePolicies in the indexer for a given namespace.
func (s awsEcrLifecyclePolicyNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsEcrLifecyclePolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsEcrLifecyclePolicy))
	})
	return ret, err
}

// Get retrieves the AwsEcrLifecyclePolicy from the indexer for a given namespace and name.
func (s awsEcrLifecyclePolicyNamespaceLister) Get(name string) (*v1.AwsEcrLifecyclePolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsecrlifecyclepolicy"), name)
	}
	return obj.(*v1.AwsEcrLifecyclePolicy), nil
}
