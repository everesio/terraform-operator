/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsCloudwatchEventPermissionLister helps list AwsCloudwatchEventPermissions.
type AwsCloudwatchEventPermissionLister interface {
	// List lists all AwsCloudwatchEventPermissions in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsCloudwatchEventPermission, err error)
	// AwsCloudwatchEventPermissions returns an object that can list and get AwsCloudwatchEventPermissions.
	AwsCloudwatchEventPermissions(namespace string) AwsCloudwatchEventPermissionNamespaceLister
	AwsCloudwatchEventPermissionListerExpansion
}

// awsCloudwatchEventPermissionLister implements the AwsCloudwatchEventPermissionLister interface.
type awsCloudwatchEventPermissionLister struct {
	indexer cache.Indexer
}

// NewAwsCloudwatchEventPermissionLister returns a new AwsCloudwatchEventPermissionLister.
func NewAwsCloudwatchEventPermissionLister(indexer cache.Indexer) AwsCloudwatchEventPermissionLister {
	return &awsCloudwatchEventPermissionLister{indexer: indexer}
}

// List lists all AwsCloudwatchEventPermissions in the indexer.
func (s *awsCloudwatchEventPermissionLister) List(selector labels.Selector) (ret []*v1.AwsCloudwatchEventPermission, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsCloudwatchEventPermission))
	})
	return ret, err
}

// AwsCloudwatchEventPermissions returns an object that can list and get AwsCloudwatchEventPermissions.
func (s *awsCloudwatchEventPermissionLister) AwsCloudwatchEventPermissions(namespace string) AwsCloudwatchEventPermissionNamespaceLister {
	return awsCloudwatchEventPermissionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsCloudwatchEventPermissionNamespaceLister helps list and get AwsCloudwatchEventPermissions.
type AwsCloudwatchEventPermissionNamespaceLister interface {
	// List lists all AwsCloudwatchEventPermissions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsCloudwatchEventPermission, err error)
	// Get retrieves the AwsCloudwatchEventPermission from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsCloudwatchEventPermission, error)
	AwsCloudwatchEventPermissionNamespaceListerExpansion
}

// awsCloudwatchEventPermissionNamespaceLister implements the AwsCloudwatchEventPermissionNamespaceLister
// interface.
type awsCloudwatchEventPermissionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsCloudwatchEventPermissions in the indexer for a given namespace.
func (s awsCloudwatchEventPermissionNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsCloudwatchEventPermission, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsCloudwatchEventPermission))
	})
	return ret, err
}

// Get retrieves the AwsCloudwatchEventPermission from the indexer for a given namespace and name.
func (s awsCloudwatchEventPermissionNamespaceLister) Get(name string) (*v1.AwsCloudwatchEventPermission, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awscloudwatcheventpermission"), name)
	}
	return obj.(*v1.AwsCloudwatchEventPermission), nil
}
