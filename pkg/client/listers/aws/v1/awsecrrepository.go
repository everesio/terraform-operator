/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsEcrRepositoryLister helps list AwsEcrRepositories.
type AwsEcrRepositoryLister interface {
	// List lists all AwsEcrRepositories in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsEcrRepository, err error)
	// AwsEcrRepositories returns an object that can list and get AwsEcrRepositories.
	AwsEcrRepositories(namespace string) AwsEcrRepositoryNamespaceLister
	AwsEcrRepositoryListerExpansion
}

// awsEcrRepositoryLister implements the AwsEcrRepositoryLister interface.
type awsEcrRepositoryLister struct {
	indexer cache.Indexer
}

// NewAwsEcrRepositoryLister returns a new AwsEcrRepositoryLister.
func NewAwsEcrRepositoryLister(indexer cache.Indexer) AwsEcrRepositoryLister {
	return &awsEcrRepositoryLister{indexer: indexer}
}

// List lists all AwsEcrRepositories in the indexer.
func (s *awsEcrRepositoryLister) List(selector labels.Selector) (ret []*v1.AwsEcrRepository, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsEcrRepository))
	})
	return ret, err
}

// AwsEcrRepositories returns an object that can list and get AwsEcrRepositories.
func (s *awsEcrRepositoryLister) AwsEcrRepositories(namespace string) AwsEcrRepositoryNamespaceLister {
	return awsEcrRepositoryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsEcrRepositoryNamespaceLister helps list and get AwsEcrRepositories.
type AwsEcrRepositoryNamespaceLister interface {
	// List lists all AwsEcrRepositories in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsEcrRepository, err error)
	// Get retrieves the AwsEcrRepository from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsEcrRepository, error)
	AwsEcrRepositoryNamespaceListerExpansion
}

// awsEcrRepositoryNamespaceLister implements the AwsEcrRepositoryNamespaceLister
// interface.
type awsEcrRepositoryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsEcrRepositories in the indexer for a given namespace.
func (s awsEcrRepositoryNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsEcrRepository, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsEcrRepository))
	})
	return ret, err
}

// Get retrieves the AwsEcrRepository from the indexer for a given namespace and name.
func (s awsEcrRepositoryNamespaceLister) Get(name string) (*v1.AwsEcrRepository, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsecrrepository"), name)
	}
	return obj.(*v1.AwsEcrRepository), nil
}
