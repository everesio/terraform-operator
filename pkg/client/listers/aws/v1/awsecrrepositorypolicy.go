/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsEcrRepositoryPolicyLister helps list AwsEcrRepositoryPolicies.
type AwsEcrRepositoryPolicyLister interface {
	// List lists all AwsEcrRepositoryPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsEcrRepositoryPolicy, err error)
	// AwsEcrRepositoryPolicies returns an object that can list and get AwsEcrRepositoryPolicies.
	AwsEcrRepositoryPolicies(namespace string) AwsEcrRepositoryPolicyNamespaceLister
	AwsEcrRepositoryPolicyListerExpansion
}

// awsEcrRepositoryPolicyLister implements the AwsEcrRepositoryPolicyLister interface.
type awsEcrRepositoryPolicyLister struct {
	indexer cache.Indexer
}

// NewAwsEcrRepositoryPolicyLister returns a new AwsEcrRepositoryPolicyLister.
func NewAwsEcrRepositoryPolicyLister(indexer cache.Indexer) AwsEcrRepositoryPolicyLister {
	return &awsEcrRepositoryPolicyLister{indexer: indexer}
}

// List lists all AwsEcrRepositoryPolicies in the indexer.
func (s *awsEcrRepositoryPolicyLister) List(selector labels.Selector) (ret []*v1.AwsEcrRepositoryPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsEcrRepositoryPolicy))
	})
	return ret, err
}

// AwsEcrRepositoryPolicies returns an object that can list and get AwsEcrRepositoryPolicies.
func (s *awsEcrRepositoryPolicyLister) AwsEcrRepositoryPolicies(namespace string) AwsEcrRepositoryPolicyNamespaceLister {
	return awsEcrRepositoryPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsEcrRepositoryPolicyNamespaceLister helps list and get AwsEcrRepositoryPolicies.
type AwsEcrRepositoryPolicyNamespaceLister interface {
	// List lists all AwsEcrRepositoryPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsEcrRepositoryPolicy, err error)
	// Get retrieves the AwsEcrRepositoryPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsEcrRepositoryPolicy, error)
	AwsEcrRepositoryPolicyNamespaceListerExpansion
}

// awsEcrRepositoryPolicyNamespaceLister implements the AwsEcrRepositoryPolicyNamespaceLister
// interface.
type awsEcrRepositoryPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsEcrRepositoryPolicies in the indexer for a given namespace.
func (s awsEcrRepositoryPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsEcrRepositoryPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsEcrRepositoryPolicy))
	})
	return ret, err
}

// Get retrieves the AwsEcrRepositoryPolicy from the indexer for a given namespace and name.
func (s awsEcrRepositoryPolicyNamespaceLister) Get(name string) (*v1.AwsEcrRepositoryPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsecrrepositorypolicy"), name)
	}
	return obj.(*v1.AwsEcrRepositoryPolicy), nil
}
