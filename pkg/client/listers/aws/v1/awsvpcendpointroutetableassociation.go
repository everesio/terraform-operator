/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsVpcEndpointRouteTableAssociationLister helps list AwsVpcEndpointRouteTableAssociations.
type AwsVpcEndpointRouteTableAssociationLister interface {
	// List lists all AwsVpcEndpointRouteTableAssociations in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsVpcEndpointRouteTableAssociation, err error)
	// AwsVpcEndpointRouteTableAssociations returns an object that can list and get AwsVpcEndpointRouteTableAssociations.
	AwsVpcEndpointRouteTableAssociations(namespace string) AwsVpcEndpointRouteTableAssociationNamespaceLister
	AwsVpcEndpointRouteTableAssociationListerExpansion
}

// awsVpcEndpointRouteTableAssociationLister implements the AwsVpcEndpointRouteTableAssociationLister interface.
type awsVpcEndpointRouteTableAssociationLister struct {
	indexer cache.Indexer
}

// NewAwsVpcEndpointRouteTableAssociationLister returns a new AwsVpcEndpointRouteTableAssociationLister.
func NewAwsVpcEndpointRouteTableAssociationLister(indexer cache.Indexer) AwsVpcEndpointRouteTableAssociationLister {
	return &awsVpcEndpointRouteTableAssociationLister{indexer: indexer}
}

// List lists all AwsVpcEndpointRouteTableAssociations in the indexer.
func (s *awsVpcEndpointRouteTableAssociationLister) List(selector labels.Selector) (ret []*v1.AwsVpcEndpointRouteTableAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsVpcEndpointRouteTableAssociation))
	})
	return ret, err
}

// AwsVpcEndpointRouteTableAssociations returns an object that can list and get AwsVpcEndpointRouteTableAssociations.
func (s *awsVpcEndpointRouteTableAssociationLister) AwsVpcEndpointRouteTableAssociations(namespace string) AwsVpcEndpointRouteTableAssociationNamespaceLister {
	return awsVpcEndpointRouteTableAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsVpcEndpointRouteTableAssociationNamespaceLister helps list and get AwsVpcEndpointRouteTableAssociations.
type AwsVpcEndpointRouteTableAssociationNamespaceLister interface {
	// List lists all AwsVpcEndpointRouteTableAssociations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsVpcEndpointRouteTableAssociation, err error)
	// Get retrieves the AwsVpcEndpointRouteTableAssociation from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsVpcEndpointRouteTableAssociation, error)
	AwsVpcEndpointRouteTableAssociationNamespaceListerExpansion
}

// awsVpcEndpointRouteTableAssociationNamespaceLister implements the AwsVpcEndpointRouteTableAssociationNamespaceLister
// interface.
type awsVpcEndpointRouteTableAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsVpcEndpointRouteTableAssociations in the indexer for a given namespace.
func (s awsVpcEndpointRouteTableAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsVpcEndpointRouteTableAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsVpcEndpointRouteTableAssociation))
	})
	return ret, err
}

// Get retrieves the AwsVpcEndpointRouteTableAssociation from the indexer for a given namespace and name.
func (s awsVpcEndpointRouteTableAssociationNamespaceLister) Get(name string) (*v1.AwsVpcEndpointRouteTableAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsvpcendpointroutetableassociation"), name)
	}
	return obj.(*v1.AwsVpcEndpointRouteTableAssociation), nil
}
