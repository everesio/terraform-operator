/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsWafGeoMatchSetLister helps list AwsWafGeoMatchSets.
type AwsWafGeoMatchSetLister interface {
	// List lists all AwsWafGeoMatchSets in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsWafGeoMatchSet, err error)
	// AwsWafGeoMatchSets returns an object that can list and get AwsWafGeoMatchSets.
	AwsWafGeoMatchSets(namespace string) AwsWafGeoMatchSetNamespaceLister
	AwsWafGeoMatchSetListerExpansion
}

// awsWafGeoMatchSetLister implements the AwsWafGeoMatchSetLister interface.
type awsWafGeoMatchSetLister struct {
	indexer cache.Indexer
}

// NewAwsWafGeoMatchSetLister returns a new AwsWafGeoMatchSetLister.
func NewAwsWafGeoMatchSetLister(indexer cache.Indexer) AwsWafGeoMatchSetLister {
	return &awsWafGeoMatchSetLister{indexer: indexer}
}

// List lists all AwsWafGeoMatchSets in the indexer.
func (s *awsWafGeoMatchSetLister) List(selector labels.Selector) (ret []*v1.AwsWafGeoMatchSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsWafGeoMatchSet))
	})
	return ret, err
}

// AwsWafGeoMatchSets returns an object that can list and get AwsWafGeoMatchSets.
func (s *awsWafGeoMatchSetLister) AwsWafGeoMatchSets(namespace string) AwsWafGeoMatchSetNamespaceLister {
	return awsWafGeoMatchSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsWafGeoMatchSetNamespaceLister helps list and get AwsWafGeoMatchSets.
type AwsWafGeoMatchSetNamespaceLister interface {
	// List lists all AwsWafGeoMatchSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsWafGeoMatchSet, err error)
	// Get retrieves the AwsWafGeoMatchSet from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsWafGeoMatchSet, error)
	AwsWafGeoMatchSetNamespaceListerExpansion
}

// awsWafGeoMatchSetNamespaceLister implements the AwsWafGeoMatchSetNamespaceLister
// interface.
type awsWafGeoMatchSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsWafGeoMatchSets in the indexer for a given namespace.
func (s awsWafGeoMatchSetNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsWafGeoMatchSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsWafGeoMatchSet))
	})
	return ret, err
}

// Get retrieves the AwsWafGeoMatchSet from the indexer for a given namespace and name.
func (s awsWafGeoMatchSetNamespaceLister) Get(name string) (*v1.AwsWafGeoMatchSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awswafgeomatchset"), name)
	}
	return obj.(*v1.AwsWafGeoMatchSet), nil
}
