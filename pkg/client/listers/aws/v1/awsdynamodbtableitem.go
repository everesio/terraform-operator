/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AwsDynamodbTableItemLister helps list AwsDynamodbTableItems.
type AwsDynamodbTableItemLister interface {
	// List lists all AwsDynamodbTableItems in the indexer.
	List(selector labels.Selector) (ret []*v1.AwsDynamodbTableItem, err error)
	// AwsDynamodbTableItems returns an object that can list and get AwsDynamodbTableItems.
	AwsDynamodbTableItems(namespace string) AwsDynamodbTableItemNamespaceLister
	AwsDynamodbTableItemListerExpansion
}

// awsDynamodbTableItemLister implements the AwsDynamodbTableItemLister interface.
type awsDynamodbTableItemLister struct {
	indexer cache.Indexer
}

// NewAwsDynamodbTableItemLister returns a new AwsDynamodbTableItemLister.
func NewAwsDynamodbTableItemLister(indexer cache.Indexer) AwsDynamodbTableItemLister {
	return &awsDynamodbTableItemLister{indexer: indexer}
}

// List lists all AwsDynamodbTableItems in the indexer.
func (s *awsDynamodbTableItemLister) List(selector labels.Selector) (ret []*v1.AwsDynamodbTableItem, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsDynamodbTableItem))
	})
	return ret, err
}

// AwsDynamodbTableItems returns an object that can list and get AwsDynamodbTableItems.
func (s *awsDynamodbTableItemLister) AwsDynamodbTableItems(namespace string) AwsDynamodbTableItemNamespaceLister {
	return awsDynamodbTableItemNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AwsDynamodbTableItemNamespaceLister helps list and get AwsDynamodbTableItems.
type AwsDynamodbTableItemNamespaceLister interface {
	// List lists all AwsDynamodbTableItems in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AwsDynamodbTableItem, err error)
	// Get retrieves the AwsDynamodbTableItem from the indexer for a given namespace and name.
	Get(name string) (*v1.AwsDynamodbTableItem, error)
	AwsDynamodbTableItemNamespaceListerExpansion
}

// awsDynamodbTableItemNamespaceLister implements the AwsDynamodbTableItemNamespaceLister
// interface.
type awsDynamodbTableItemNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AwsDynamodbTableItems in the indexer for a given namespace.
func (s awsDynamodbTableItemNamespaceLister) List(selector labels.Selector) (ret []*v1.AwsDynamodbTableItem, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AwsDynamodbTableItem))
	})
	return ret, err
}

// Get retrieves the AwsDynamodbTableItem from the indexer for a given namespace and name.
func (s awsDynamodbTableItemNamespaceLister) Get(name string) (*v1.AwsDynamodbTableItem, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("awsdynamodbtableitem"), name)
	}
	return obj.(*v1.AwsDynamodbTableItem), nil
}
