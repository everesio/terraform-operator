/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	scheme "github.com/trussle/terraform-operator/pkg/client/clientset/versioned/scheme"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// AwsDxConnectionAssociationsGetter has a method to return a AwsDxConnectionAssociationInterface.
// A group's client should implement this interface.
type AwsDxConnectionAssociationsGetter interface {
	AwsDxConnectionAssociations(namespace string) AwsDxConnectionAssociationInterface
}

// AwsDxConnectionAssociationInterface has methods to work with AwsDxConnectionAssociation resources.
type AwsDxConnectionAssociationInterface interface {
	Create(*v1.AwsDxConnectionAssociation) (*v1.AwsDxConnectionAssociation, error)
	Update(*v1.AwsDxConnectionAssociation) (*v1.AwsDxConnectionAssociation, error)
	Delete(name string, options *meta_v1.DeleteOptions) error
	DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error
	Get(name string, options meta_v1.GetOptions) (*v1.AwsDxConnectionAssociation, error)
	List(opts meta_v1.ListOptions) (*v1.AwsDxConnectionAssociationList, error)
	Watch(opts meta_v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.AwsDxConnectionAssociation, err error)
	AwsDxConnectionAssociationExpansion
}

// awsDxConnectionAssociations implements AwsDxConnectionAssociationInterface
type awsDxConnectionAssociations struct {
	client rest.Interface
	ns     string
}

// newAwsDxConnectionAssociations returns a AwsDxConnectionAssociations
func newAwsDxConnectionAssociations(c *TrussleV1Client, namespace string) *awsDxConnectionAssociations {
	return &awsDxConnectionAssociations{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the awsDxConnectionAssociation, and returns the corresponding awsDxConnectionAssociation object, and an error if there is any.
func (c *awsDxConnectionAssociations) Get(name string, options meta_v1.GetOptions) (result *v1.AwsDxConnectionAssociation, err error) {
	result = &v1.AwsDxConnectionAssociation{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("awsdxconnectionassociations").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of AwsDxConnectionAssociations that match those selectors.
func (c *awsDxConnectionAssociations) List(opts meta_v1.ListOptions) (result *v1.AwsDxConnectionAssociationList, err error) {
	result = &v1.AwsDxConnectionAssociationList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("awsdxconnectionassociations").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested awsDxConnectionAssociations.
func (c *awsDxConnectionAssociations) Watch(opts meta_v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("awsdxconnectionassociations").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a awsDxConnectionAssociation and creates it.  Returns the server's representation of the awsDxConnectionAssociation, and an error, if there is any.
func (c *awsDxConnectionAssociations) Create(awsDxConnectionAssociation *v1.AwsDxConnectionAssociation) (result *v1.AwsDxConnectionAssociation, err error) {
	result = &v1.AwsDxConnectionAssociation{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("awsdxconnectionassociations").
		Body(awsDxConnectionAssociation).
		Do().
		Into(result)
	return
}

// Update takes the representation of a awsDxConnectionAssociation and updates it. Returns the server's representation of the awsDxConnectionAssociation, and an error, if there is any.
func (c *awsDxConnectionAssociations) Update(awsDxConnectionAssociation *v1.AwsDxConnectionAssociation) (result *v1.AwsDxConnectionAssociation, err error) {
	result = &v1.AwsDxConnectionAssociation{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("awsdxconnectionassociations").
		Name(awsDxConnectionAssociation.Name).
		Body(awsDxConnectionAssociation).
		Do().
		Into(result)
	return
}

// Delete takes name of the awsDxConnectionAssociation and deletes it. Returns an error if one occurs.
func (c *awsDxConnectionAssociations) Delete(name string, options *meta_v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("awsdxconnectionassociations").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *awsDxConnectionAssociations) DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("awsdxconnectionassociations").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched awsDxConnectionAssociation.
func (c *awsDxConnectionAssociations) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.AwsDxConnectionAssociation, err error) {
	result = &v1.AwsDxConnectionAssociation{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("awsdxconnectionassociations").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
