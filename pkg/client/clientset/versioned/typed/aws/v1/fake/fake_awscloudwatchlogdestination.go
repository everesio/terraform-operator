/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	aws_v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeAwsCloudwatchLogDestinations implements AwsCloudwatchLogDestinationInterface
type FakeAwsCloudwatchLogDestinations struct {
	Fake *FakeTrussleV1
	ns   string
}

var awscloudwatchlogdestinationsResource = schema.GroupVersionResource{Group: "trussle.com", Version: "v1", Resource: "awscloudwatchlogdestinations"}

var awscloudwatchlogdestinationsKind = schema.GroupVersionKind{Group: "trussle.com", Version: "v1", Kind: "AwsCloudwatchLogDestination"}

// Get takes name of the awsCloudwatchLogDestination, and returns the corresponding awsCloudwatchLogDestination object, and an error if there is any.
func (c *FakeAwsCloudwatchLogDestinations) Get(name string, options v1.GetOptions) (result *aws_v1.AwsCloudwatchLogDestination, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(awscloudwatchlogdestinationsResource, c.ns, name), &aws_v1.AwsCloudwatchLogDestination{})

	if obj == nil {
		return nil, err
	}
	return obj.(*aws_v1.AwsCloudwatchLogDestination), err
}

// List takes label and field selectors, and returns the list of AwsCloudwatchLogDestinations that match those selectors.
func (c *FakeAwsCloudwatchLogDestinations) List(opts v1.ListOptions) (result *aws_v1.AwsCloudwatchLogDestinationList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(awscloudwatchlogdestinationsResource, awscloudwatchlogdestinationsKind, c.ns, opts), &aws_v1.AwsCloudwatchLogDestinationList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &aws_v1.AwsCloudwatchLogDestinationList{}
	for _, item := range obj.(*aws_v1.AwsCloudwatchLogDestinationList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested awsCloudwatchLogDestinations.
func (c *FakeAwsCloudwatchLogDestinations) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(awscloudwatchlogdestinationsResource, c.ns, opts))

}

// Create takes the representation of a awsCloudwatchLogDestination and creates it.  Returns the server's representation of the awsCloudwatchLogDestination, and an error, if there is any.
func (c *FakeAwsCloudwatchLogDestinations) Create(awsCloudwatchLogDestination *aws_v1.AwsCloudwatchLogDestination) (result *aws_v1.AwsCloudwatchLogDestination, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(awscloudwatchlogdestinationsResource, c.ns, awsCloudwatchLogDestination), &aws_v1.AwsCloudwatchLogDestination{})

	if obj == nil {
		return nil, err
	}
	return obj.(*aws_v1.AwsCloudwatchLogDestination), err
}

// Update takes the representation of a awsCloudwatchLogDestination and updates it. Returns the server's representation of the awsCloudwatchLogDestination, and an error, if there is any.
func (c *FakeAwsCloudwatchLogDestinations) Update(awsCloudwatchLogDestination *aws_v1.AwsCloudwatchLogDestination) (result *aws_v1.AwsCloudwatchLogDestination, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(awscloudwatchlogdestinationsResource, c.ns, awsCloudwatchLogDestination), &aws_v1.AwsCloudwatchLogDestination{})

	if obj == nil {
		return nil, err
	}
	return obj.(*aws_v1.AwsCloudwatchLogDestination), err
}

// Delete takes name of the awsCloudwatchLogDestination and deletes it. Returns an error if one occurs.
func (c *FakeAwsCloudwatchLogDestinations) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(awscloudwatchlogdestinationsResource, c.ns, name), &aws_v1.AwsCloudwatchLogDestination{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeAwsCloudwatchLogDestinations) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(awscloudwatchlogdestinationsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &aws_v1.AwsCloudwatchLogDestinationList{})
	return err
}

// Patch applies the patch and returns the patched awsCloudwatchLogDestination.
func (c *FakeAwsCloudwatchLogDestinations) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *aws_v1.AwsCloudwatchLogDestination, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(awscloudwatchlogdestinationsResource, c.ns, name, data, subresources...), &aws_v1.AwsCloudwatchLogDestination{})

	if obj == nil {
		return nil, err
	}
	return obj.(*aws_v1.AwsCloudwatchLogDestination), err
}
