/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	aws_v1 "github.com/trussle/terraform-operator/pkg/apis/aws/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeAwsElasticsearchDomains implements AwsElasticsearchDomainInterface
type FakeAwsElasticsearchDomains struct {
	Fake *FakeTrussleV1
	ns   string
}

var awselasticsearchdomainsResource = schema.GroupVersionResource{Group: "trussle.com", Version: "v1", Resource: "awselasticsearchdomains"}

var awselasticsearchdomainsKind = schema.GroupVersionKind{Group: "trussle.com", Version: "v1", Kind: "AwsElasticsearchDomain"}

// Get takes name of the awsElasticsearchDomain, and returns the corresponding awsElasticsearchDomain object, and an error if there is any.
func (c *FakeAwsElasticsearchDomains) Get(name string, options v1.GetOptions) (result *aws_v1.AwsElasticsearchDomain, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(awselasticsearchdomainsResource, c.ns, name), &aws_v1.AwsElasticsearchDomain{})

	if obj == nil {
		return nil, err
	}
	return obj.(*aws_v1.AwsElasticsearchDomain), err
}

// List takes label and field selectors, and returns the list of AwsElasticsearchDomains that match those selectors.
func (c *FakeAwsElasticsearchDomains) List(opts v1.ListOptions) (result *aws_v1.AwsElasticsearchDomainList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(awselasticsearchdomainsResource, awselasticsearchdomainsKind, c.ns, opts), &aws_v1.AwsElasticsearchDomainList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &aws_v1.AwsElasticsearchDomainList{}
	for _, item := range obj.(*aws_v1.AwsElasticsearchDomainList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested awsElasticsearchDomains.
func (c *FakeAwsElasticsearchDomains) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(awselasticsearchdomainsResource, c.ns, opts))

}

// Create takes the representation of a awsElasticsearchDomain and creates it.  Returns the server's representation of the awsElasticsearchDomain, and an error, if there is any.
func (c *FakeAwsElasticsearchDomains) Create(awsElasticsearchDomain *aws_v1.AwsElasticsearchDomain) (result *aws_v1.AwsElasticsearchDomain, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(awselasticsearchdomainsResource, c.ns, awsElasticsearchDomain), &aws_v1.AwsElasticsearchDomain{})

	if obj == nil {
		return nil, err
	}
	return obj.(*aws_v1.AwsElasticsearchDomain), err
}

// Update takes the representation of a awsElasticsearchDomain and updates it. Returns the server's representation of the awsElasticsearchDomain, and an error, if there is any.
func (c *FakeAwsElasticsearchDomains) Update(awsElasticsearchDomain *aws_v1.AwsElasticsearchDomain) (result *aws_v1.AwsElasticsearchDomain, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(awselasticsearchdomainsResource, c.ns, awsElasticsearchDomain), &aws_v1.AwsElasticsearchDomain{})

	if obj == nil {
		return nil, err
	}
	return obj.(*aws_v1.AwsElasticsearchDomain), err
}

// Delete takes name of the awsElasticsearchDomain and deletes it. Returns an error if one occurs.
func (c *FakeAwsElasticsearchDomains) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(awselasticsearchdomainsResource, c.ns, name), &aws_v1.AwsElasticsearchDomain{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeAwsElasticsearchDomains) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(awselasticsearchdomainsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &aws_v1.AwsElasticsearchDomainList{})
	return err
}

// Patch applies the patch and returns the patched awsElasticsearchDomain.
func (c *FakeAwsElasticsearchDomains) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *aws_v1.AwsElasticsearchDomain, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(awselasticsearchdomainsResource, c.ns, name, data, subresources...), &aws_v1.AwsElasticsearchDomain{})

	if obj == nil {
		return nil, err
	}
	return obj.(*aws_v1.AwsElasticsearchDomain), err
}
